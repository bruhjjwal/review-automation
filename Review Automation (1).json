{
  "nodes": [
    {
      "parameters": {},
      "id": "6bdd5754-8034-4cbe-9f95-f32bef47b6db",
      "name": "Cron Trigger2",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -1296,
        2304
      ]
    },
    {
      "parameters": {
        "url": "https://www.bewakoof.com/api/rn/v1/admin/submitted-reviews",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "pending"
            },
            {
              "name": "per_page",
              "value": "5"
            },
            {
              "name": "page",
              "value": "0"
            }
          ]
        },
        "options": {
          "response": {},
          "timeout": 30000
        }
      },
      "id": "5440aec3-5ea6-432c-96a5-2ead88212257",
      "name": "Fetch Pending Reviews2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1088,
        2304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process reviews and add computed fields\nconst reviews = $json.reviews;\n\n// Error handling\nif (!reviews) {\n  return { error: \"No reviews found to process\" };\n}\n\nif (!Array.isArray(reviews)) {\n  return { error: \"Invalid reviews data format\" };\n}\n\nif (reviews.length === 0) {\n  return { error: \"No reviews found to process\" };\n}\n\n// Process each review\nconst processedReviews = reviews.map(review => {\n  // Skip reviews missing required fields\n  if (!review.id || !review.user_id || !review.product_id || typeof review.rating === 'undefined' || !review.review) {\n    console.warn(`Skipping review ${review.id} - missing required fields`);\n    return null;\n  }\n\n  // CORRECTED: Image detection logic\n  const hasImage = review.images && review.images.length > 0 && review.enabled_images_count > 0;\n  const imageUrl = hasImage && review.images[0] ? review.images[0].url : null;\n  \n  return {\n    // Original API fields (direct passthrough)\n    id: review.id,\n    user_id: review.user_id,\n    user_name: review.user_name,\n    product_id: review.product_id,\n    order_id: review.order_id,\n    rating: review.rating,\n    review: review.review,\n    images: review.images,\n    enabled_images_count: review.enabled_images_count,\n    created_at: review.created_at,\n    status: review.status,\n    edited: review.edited,\n    edited_review: review.edited_review,\n    verified_purchase: review.verified_purchase,\n    submittedBy: review.submittedBy,\n    title: review.title,\n    \n    // Computed fields\n    has_image: hasImage,\n    image_url: imageUrl,\n    processed_at: new Date().toISOString()\n  };\n}).filter(review => review !== null);\n\n// Calculate metadata\nconst textOnlyCount = processedReviews.filter(r => !r.has_image).length;\nconst imageReviewCount = processedReviews.filter(r => r.has_image).length;\n\n// Return final structure\nreturn {\n  reviews: processedReviews,\n  metadata: {\n    total_count: processedReviews.length,\n    text_only_count: textOnlyCount,\n    image_review_count: imageReviewCount,\n    processed_at: new Date().toISOString()\n  }\n};"
      },
      "id": "407a5af6-685a-4881-8a30-e54c5ce3daed",
      "name": "Data Preparation2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        2304
      ]
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {
          "reset": false
        }
      },
      "id": "babe516a-98cc-4bc3-9538-c086b651aa7f",
      "name": "Split In Batches2",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -688,
        2304
      ]
    },
    {
      "parameters": {
        "url": "https://s3.amazonaws.com/YOUR_BUCKET/product-images/{{ $json.product_id }}/",
        "options": {
          "response": {},
          "timeout": 30000
        }
      },
      "id": "4ca68750-3da9-4863-bd1b-373018fa335e",
      "name": "Fetch Product Images2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -288,
        2096
      ]
    },
    {
      "parameters": {
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-vision:generateContent",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "YOUR_GOOGLE_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "contents",
              "value": "=[{\n  \"parts\": [\n    {\n      \"text\": \"Compare the user-submitted image with the product catalogue images. Rate similarity from 0-100 where:\\n100 = Same product, good quality\\n80-99 = Same product, minor differences\\n50-79 = Same product, significant differences\\n30-49 = Possibly same product, poor quality\\n0-29 = Different product or completely irrelevant\\n\\nUser submitted image URL: {{ $json.image_url }}\\nProduct ID: {{ $json.product_id }}\\n\\nReturn JSON only:\\n{\\n  \\\"similarity_score\\\": 85,\\n  \\\"reasoning\\\": \\\"Same product, good lighting and angle\\\",\\n  \\\"recommendation\\\": \\\"proceed\\\"\\n}\"\n    },\n    {\n      \"inline_data\": {\n        \"mime_type\": \"image/jpeg\",\n        \"data\": \"{{ $json.image_url }}\"\n      }\n    }\n  ]\n}]"
            },
            {
              "name": "generationConfig",
              "value": "={\n  \"temperature\": 0.2,\n  \"candidateCount\": 1,\n  \"maxOutputTokens\": 300\n}"
            }
          ]
        },
        "options": {
          "response": {},
          "timeout": 60000
        }
      },
      "id": "b37687f4-0d0b-4907-b7a9-cbc9519a900a",
      "name": "Image Similarity Analysis2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -80,
        2096
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse image similarity response and make routing decision\ntry {\n  const geminiResponse = $json.candidates[0].content.parts[0].text;\n  const cleanResponse = geminiResponse.replace(/```json|```/g, '').trim();\n  const imageAnalysis = JSON.parse(cleanResponse);\n  \n  const similarityThreshold = 50; // Minimum similarity required\n  \n  // Get original review data from previous node\n  const reviewData = $('Split In Batches2').item.json;\n  \n  if (imageAnalysis.similarity_score >= similarityThreshold) {\n    // Image passed - route to text analysis with image score bonus\n    return {\n      ...reviewData,\n      image_similarity_score: imageAnalysis.similarity_score,\n      image_reasoning: imageAnalysis.reasoning,\n      image_status: 'validated',\n      route_to: 'text_analysis'\n    };\n  } else {\n    // Image failed - direct rejection\n    return {\n      ...reviewData,\n      image_similarity_score: imageAnalysis.similarity_score,\n      image_reasoning: imageAnalysis.reasoning,\n      image_status: 'rejected',\n      route_to: 'direct_reject',\n      final_decision: 'rejected',\n      ai_reasoning: `Image rejected: ${imageAnalysis.reasoning}`,\n      processed_at: new Date().toISOString()\n    };\n  }\n} catch (error) {\n  // Error handling - route to manual review\n  const reviewData = $('Split In Batches2').item.json;\n  return {\n    ...reviewData,\n    image_similarity_score: 0,\n    image_reasoning: 'Image processing error: ' + error.message,\n    image_status: 'error',\n    route_to: 'manual_review',\n    final_decision: 'manual_review',\n    ai_reasoning: 'Image processing failed',\n    processed_at: new Date().toISOString()\n  };\n}"
      },
      "id": "c0dd203e-d178-4366-b563-8f1fb2de33f9",
      "name": "Image Decision Logic2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        2096
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.image_similarity_score }}",
                    "rightValue": "50",
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    },
                    "id": "image-score-gt-50"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.image_similarity_score }}",
                    "rightValue": "50",
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    },
                    "id": "image-score-lte-50"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "05f1e875-986e-4e54-aaee-fdf958d23adc",
      "name": "Image Router2",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        320,
        2096
      ]
    },
    {
      "parameters": {
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "YOUR_GOOGLE_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "contents",
              "value": "=[{\n  \"parts\": [{\n    \"text\": \"You are a review moderation AI for Bewakoof fashion brand.\\n\\nMODERATION GUIDELINES:\\n[PASTE YOUR GUIDELINES HERE]\\n\\nAnalyze this review:\\nRating: {{ $json.rating }}/5\\nReview Text: {{ $json.review }}\\nProduct ID: {{ $json.product_id }}\\nUser: {{ $json.user_name }}\\n{{ $json.image_similarity_score ? 'Image Similarity Score: ' + $json.image_similarity_score + '/100' : '' }}\\n\\nReturn ONLY valid JSON in this exact format:\\n{\\n  \\\"sentiment_score\\\": 75,\\n  \\\"decision\\\": \\\"approve\\\",\\n  \\\"reasoning\\\": \\\"Positive review with constructive feedback\\\",\\n  \\\"issues_detected\\\": []\\n}\"\n  }]\n}]"
            },
            {
              "name": "generationConfig",
              "value": "={\n  \"temperature\": 0.3,\n  \"candidateCount\": 1,\n  \"maxOutputTokens\": 500\n}"
            }
          ]
        },
        "options": {
          "response": {},
          "timeout": 30000
        }
      },
      "id": "6efa6549-4d60-4ef0-a7d5-fe887d09e0ee",
      "name": "Gemini Text Analysis2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -192,
        2496
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse Gemini response and apply decision logic\ntry {\n  const geminiResponse = $json.candidates[0].content.parts[0].text;\n  const cleanResponse = geminiResponse.replace(/```json|```/g, '').trim();\n  const aiResponse = JSON.parse(cleanResponse);\n  \n  const threshold = 50; // Starting threshold\n  \n  // Get original review data\n  const reviewData = $('Split In Batches2').item.json;\n  \n  // Apply decision logic\n  let final_decision;\n  if (aiResponse.sentiment_score >= threshold && aiResponse.decision === 'approve') {\n    final_decision = 'approved';\n  } else if (aiResponse.sentiment_score < 30 || aiResponse.decision === 'reject') {\n    final_decision = 'rejected';\n  } else {\n    final_decision = 'manual_review';\n  }\n  \n  return {\n    // Original review data\n    id: reviewData.id,\n    user_id: reviewData.user_id,\n    user_name: reviewData.user_name,\n    product_id: reviewData.product_id,\n    rating: reviewData.rating,\n    review: reviewData.review,\n    has_image: reviewData.has_image,\n    image_url: reviewData.image_url,\n    \n    // AI analysis results\n    ai_sentiment_score: aiResponse.sentiment_score,\n    ai_reasoning: aiResponse.reasoning,\n    final_decision: final_decision,\n    issues_detected: aiResponse.issues_detected || [],\n    \n    // Image analysis results (if applicable)\n    image_similarity_score: reviewData.image_similarity_score || null,\n    image_reasoning: reviewData.image_reasoning || null,\n    \n    processed_at: new Date().toISOString()\n  };\n} catch (error) {\n  // Fallback for parsing errors\n  const reviewData = $('Split In Batches2').item.json;\n  return {\n    id: reviewData.id,\n    ai_sentiment_score: 0,\n    ai_reasoning: 'AI parsing error: ' + error.message,\n    final_decision: 'manual_review',\n    issues_detected: ['ai_parsing_error'],\n    processed_at: new Date().toISOString()\n  };\n}"
      },
      "id": "32c4491e-dd57-43e3-b548-c7ffa4370cf7",
      "name": "Text Decision Logic2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        2496
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.ai_sentiment_score }}",
                    "rightValue": 50,
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    },
                    "id": "confidence-score-gt-50"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.ai_sentiment_score }}",
                    "rightValue": 30,
                    "operator": {
                      "type": "number",
                      "operation": "gte"
                    },
                    "id": "confidence-score-gte-30"
                  },
                  {
                    "leftValue": "={{ $json.ai_sentiment_score }}",
                    "rightValue": 50,
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    },
                    "id": "confidence-score-lte-50"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.ai_sentiment_score }}",
                    "rightValue": 30,
                    "operator": {
                      "type": "number",
                      "operation": "lt"
                    },
                    "id": "confidence-score-lt-30"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "e8fcf65b-0faa-4d5f-a77e-2f95ac806921",
      "name": "Final Decision Switch2",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        560,
        2272
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://www.bewakoof.com/api/rn/v1/admin/submitted-reviews/{{ $json.id }}/approve",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "approved"
            },
            {
              "name": "ai_score",
              "value": "={{ $json.ai_sentiment_score }}"
            },
            {
              "name": "ai_reasoning",
              "value": "={{ $json.ai_reasoning }}"
            },
            {
              "name": "approved_at",
              "value": "={{ $json.processed_at }}"
            },
            {
              "name": "approval_method",
              "value": "ai_auto"
            }
          ]
        },
        "options": {
          "response": {}
        }
      },
      "id": "6840aed5-61db-4ab7-b1f1-76d0ed4a4c1b",
      "name": "Update Dashboard - Approved2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        832,
        2064
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://www.bewakoof.com/api/rn/v1/admin/submitted-reviews/{{ $json.id }}/reject",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "rejected"
            },
            {
              "name": "ai_score",
              "value": "={{ $json.ai_sentiment_score }}"
            },
            {
              "name": "rejection_reason",
              "value": "={{ $json.ai_reasoning }}"
            },
            {
              "name": "image_similarity_score",
              "value": "={{ $json.image_similarity_score }}"
            },
            {
              "name": "issues_detected",
              "value": "={{ JSON.stringify($json.issues_detected) }}"
            },
            {
              "name": "rejected_at",
              "value": "={{ $json.processed_at }}"
            }
          ]
        },
        "options": {
          "response": {}
        }
      },
      "id": "c1b850e4-b366-4bf3-aede-fb86078d6214",
      "name": "Update Dashboard - Rejected2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        832,
        2256
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.has_image }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "61d4fd81-bb45-4dbc-b756-44b0c0cc11fe"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.has_image }}",
                    "rightValue": "false",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "62d4fd81-bb45-4dbc-b756-44b0c0cc11ff"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "3e80542b-ee23-4fa8-9196-7bd7c2e81c75",
      "name": "Review_Router_Image2",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -496,
        2288
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://www.bewakoof.com/api/rn/v1/admin/submitted-reviews/{{ $json.id }}/manual",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "processed"
            },
            {
              "name": "ai_score",
              "value": "={{ $json.ai_sentiment_score }}"
            },
            {
              "name": "ai_notes",
              "value": "={{ $json.ai_reasoning }}"
            },
            {
              "name": "flagged_issues",
              "value": "={{ JSON.stringify($json.issues_detected) }}"
            },
            {
              "name": "queued_at",
              "value": "={{ $json.processed_at }}"
            }
          ]
        },
        "options": {
          "response": {}
        }
      },
      "id": "1f78b0f6-31e5-4c90-b7e5-05fdddf85931",
      "name": "Update Dashboard - Manual2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        848,
        2464
      ]
    }
  ],
  "connections": {
    "Cron Trigger2": {
      "main": [
        [
          {
            "node": "Fetch Pending Reviews2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Pending Reviews2": {
      "main": [
        [
          {
            "node": "Data Preparation2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Preparation2": {
      "main": [
        [
          {
            "node": "Split In Batches2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches2": {
      "main": [
        [
          {
            "node": "Review_Router_Image2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Product Images2": {
      "main": [
        [
          {
            "node": "Image Similarity Analysis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Similarity Analysis2": {
      "main": [
        [
          {
            "node": "Image Decision Logic2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Decision Logic2": {
      "main": [
        [
          {
            "node": "Image Router2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Router2": {
      "main": [
        [
          {
            "node": "Gemini Text Analysis2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Dashboard - Rejected2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Text Analysis2": {
      "main": [
        [
          {
            "node": "Text Decision Logic2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Decision Logic2": {
      "main": [
        [
          {
            "node": "Final Decision Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Decision Switch2": {
      "main": [
        [
          {
            "node": "Update Dashboard - Approved2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Dashboard - Manual2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Dashboard - Rejected2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Review_Router_Image2": {
      "main": [
        [
          {
            "node": "Fetch Product Images2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gemini Text Analysis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "32df3e635bfb310c0297f08cd8d1fce8f2a0dd0fd2139b8d2b43fff8450ee9b5"
  }
}
